//using size_t = ul;
#pragma GCC push_options
#pragma GCC optimize("O0")
#define ul unsigned long
ul syscall(ul a,ul b,ul c=0,ul d=0,ul e=0,ul f=0,ul g=0) {
	register ul _a asm("rax") = a;
	register ul _b asm("rdi") = b;
	register ul _c asm("rsi") = c;
	register ul _d asm("rdx") = d;
	register ul _e asm("r10") = e;
	register ul _f asm("r8") = f;
	register ul _g asm("r9") = g;
	asm volatile("syscall\n"
		:::
		"rcx","r11");
	register ul h asm("eax");
	return h;
}
#pragma GCC pop_options
extern "C"
void exit(signed code) {
	syscall(60,code);
	__builtin_unreachable();
}
void abort() {
	exit(1); }
void assert(bool a) {
	if(!a) abort(); }
void* mremap(void* old,size_t old_size,size_t new_size,s flags) {
	return (void*)syscall(25,(ul)old,(ul)old_size,(ul)new_size,(ul)flags); }

#include"../linux/h"

s open(const char* path, s oflag) {
	return (s)syscall(2,(ul)path,(ul)oflag); }
s close(s fd) {
	return (s)syscall(3,fd); }
size_t write(u fd,void* data,size_t nbyte) {
	return (size_t)syscall(1,fd,(ul)data,nbyte); }
s brk(void* value) {
	return (s)syscall(12,(ul)value); }
void* mmap(void* addr,size_t len,s prot,s flags,s fildes,size_t off) {
	return (void*)syscall(9,(ul)addr,(ul)len,(ul)prot,(ul)flags,(ul)fildes,(ul)off); }

#define txt __attribute__((section(".text")))
static void
*	aux_stack_start txt,
*	aux_stack_end txt;
void mem_init() {
	size_t size = 0x100000;
    void* aux_stack_start = mmap(0,size,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS,-1,0);
	for(u i= 0;i<0x100;++i)
		((u*)aux_stack_start)[i] = 9;
	aux_stack_end= aux_stack_start;
	//exit(44);
}
void* salloc(ll diff) {
	void* old= aux_stack_end;
	aux_stack_end+= diff;
	return old;
}
void* memcpy(void* dest,const void* src,size_t n) {
	for(size_t i = 0; i < n; ++i)
		((char*)dest)[i] = ((char*)src)[i];
	return dest;
}
void* memset(void *dest,char c,size_t n) {
	for(size_t i = 0; i < n; ++i)
		((char*)dest)[i] = c;
	return dest;
}
constexpr size_t strlen(const char* a) {
	size_t size = 0;
	for(;a[size++];);
	return size-1;
}
tm<tn T,tn=decltype(T()<T())>
T& min(T& a,T& b) {
	return a<b ? a:b; }
extern "C"
void __cxa_pure_virtual() { abort(); }
#define ul