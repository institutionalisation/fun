//using size_t = u ll;
#pragma GCC push_options
#pragma GCC optimize("O0")
u ll syscall(u ll a,u ll b,u ll c=0,u ll d=0,u ll e=0,u ll f=0,u ll g=0) {
	register u ll _a asm("rax") = a;
	register u ll _b asm("rdi") = b;
	register u ll _c asm("rsi") = c;
	register u ll _d asm("rdx") = d;
	register u ll _e asm("r10") = e;
	register u ll _f asm("r8") = f;
	register u ll _g asm("r9") = g;
	asm volatile("syscall\n"
		:::
		"rcx","r11");
	register u ll h asm("eax");
	return h;
}
#pragma GCC pop_options
extern "C"
void exit(signed code) {
	syscall(60,code);
	__builtin_unreachable();
}
void abort() {
	exit(1); }
void assert(bool a) {
	if(!a) abort(); }
void* mremap(void* old,size_t old_size,size_t new_size,s flags) {
	return (void*)syscall(25,(u ll)old,(u ll)old_size,(u ll)new_size,(u ll)flags); }
s open(const char* path, s oflag) {
	return (s)syscall(2,(u ll)path,(u ll)oflag); }
size_t write(u fd,void* data,size_t nbyte) {
	return (size_t)syscall(1,fd,(u ll)data,nbyte); }
s brk(void* value) {
	return (s)syscall(12,(u ll)value);
}
u ll prog_break __attribute__((section(".text")))= 22;
void* sbrk(size_t diff) {
	++prog_break;
	exit(prog_break);
}
void* memcpy(void* dest,const void* src,size_t n) {
	for(size_t i = 0; i < n; ++i)
		((char*)dest)[i] = ((char*)src)[i];
	return dest;
}
void* memset(void *dest,char c,size_t n) {
	for(size_t i = 0; i < n; ++i)
		((char*)dest)[i] = c;
	return dest;
}
constexpr size_t strlen(const char* a) {
	size_t size = 0;
	for(;a[size++];);
	return size-1;
}
tm<tn T,tn=decltype(T()<T())>
T& min(T& a,T& b) {
	return a<b ? a:b; }
extern "C"
void __cxa_pure_virtual() { abort(); } 