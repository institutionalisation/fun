struct istream: public fstream {
	using f= fstream;
	using f::fstream;
	u t=0,cap=0;
	bool empty{};
	void flush() {
		cap= (u)syscall(0,f::fd,(ul)f::buf.x,f::buf.size);
		// ::write(1,(void*)"buffer:",7);
		// ::write(1,buf.x,buf.size);
		// ::write(1,(void*)"|" nl,2);
		empty= cap==0;
		t= 0;
	}
	Char get() {
		Char a = peek();
		++t;
		return a;
	}
	Char peek() {
		if(t==cap)
			flush();
		if(empty) {
			exit(99);
			return 0;
		}
		return f::buf[t];
	}
	tm<tn ...T>
	// std::tuple<wrap_t<T>...> get() {
	// 	return std::tuple<wrap_t<T>...>{wrap_t<T>(this)...}; }
	std::tuple<T...> get() {
		return std::tuple<T...>{ T(this)...}; }
};