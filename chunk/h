tm<tn A>
struct chunk {
	u size;
	A* x;
	A& operator[](size_t i) {
		return x[i]; }
	chunk(size_t size,A* x) {
		this.size = size;
		this.x = x;
	}
	chunk(std::initializer_list<A> a) {
		a();
	}
	void zero() {
		for(u i = 0; i < size; ++i)
			x[i]= 0;
	}
};
#define mem(t,n)\
	chunk<t>(n,(t*)__builtin_alloca(n*sizeof(t)+sizeof(size_t)))
tm<>
struct chunk<Char> {
	size_t size;
	Char* x;
	Char& operator[](size_t i) { return x[i]; }
	explicit chunk<Char>(const char* str) {
		size = strlen(str);
		x = (Char*)str;
	}
	chunk(size_t size,Char* x) {
		this.size = size;
		this.x = x;
	}
	void write(ostream& a);
};
using string = chunk<Char>;
tm<>
struct wrap_t<const char*> : string {
	using string::chunk; };
